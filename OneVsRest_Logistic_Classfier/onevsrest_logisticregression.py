# -*- coding: utf-8 -*-
"""OneVsRest_LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hRm1TvpAoM9uC15MAO4R6C92sLGQp8BK
"""

import pandas as pd
import re
import random
from ast import literal_eval
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.multiclass import OneVsRestClassifier
from sklearn.linear_model import LogisticRegression
from collections import Counter
from sklearn.metrics import accuracy_score
from sklearn.metrics import f1_score
from sklearn.metrics import roc_auc_score 
from sklearn.metrics import average_precision_score
from sklearn.metrics import recall_score

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

url = 'https://github.com/snehavishwanatha/Predict_tags_on_stackoverflow_queries/raw/master/data/train.tsv'
df = pd.read_csv(url, sep='\t')

url1 = 'https://github.com/snehavishwanatha/Predict_tags_on_stackoverflow_queries/raw/master/data/validation.tsv'
df1 = pd.read_csv(url1, sep='\t')

df['tags'] = df['tags'].apply(literal_eval)
df1['tags'] = df1['tags'].apply(literal_eval)

print(df1.head(10))
print(len(df1))

train = df
test = df1

train.head(10)

test.head()

x_train, y_train = train['title'].values, train['tags'].values
x_test, y_test = test['title'].values, test['tags'].values

REPLACE_BY_SPACE_RE = re.compile('[/(){}\[\]\|@,;]')
BAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')
STOPWORDS = set(stopwords.words('english'))

def text_prepare(text):
    """
        text: a string
        
        return: modified initial string
    """
    text = text.lower()
    text = re.sub(REPLACE_BY_SPACE_RE," ",text,)
    text = re.sub(BAD_SYMBOLS_RE,"",text)
    text = re.sub(r'\s+'," ",text)
    text = " ".join([word for word in text.split(" ") if word not in STOPWORDS])
    return text

x_train = [text_prepare(x) for x in x_train]
x_train[0]

x_test = [text_prepare(x) for x in x_test]

y_train

tfidf_converter = TfidfVectorizer(max_features=500, norm='l2', stop_words='english')
tfidf_converter.fit(df['title'])

train_tfidf =  tfidf_converter.transform(x_train)
test_tfidf =  tfidf_converter.transform(x_test)

tags_counts = Counter()

for tags in y_train:
    for tag in tags:
        tags_counts[tag] += 1
tags_counts

mlb = MultiLabelBinarizer(classes=sorted(tags_counts.keys()))
y_trained = mlb.fit_transform(y_train)
y_trained[0]

lr = LogisticRegression(C=1.0, penalty='l2', max_iter=300)
    
ovr = OneVsRestClassifier(lr)
model = ovr.fit(train_tfidf, y_trained)

predictions_for_test = ovr.predict(test_tfidf)

predictions_for_test[1]

pred_inversed = mlb.inverse_transform(predictions_for_test)

model.predict_proba(test_tfidf)

#NULL lables generated is high - noted
nc = 0 
for i in range(0,len(list(pred_inversed))):
  if not len(list(pred_inversed[i])):
    nc = nc + 1
  #print(y_test[i],list(pred_inversed[i]))
nc

accuracy = 0
#print(len(list(pred_inversed)))
for i in range(0,len(list(pred_inversed))):
  #print(pred_inversed[i])
  for j in range(0,len(list(pred_inversed[i]))):
    #print(i, j, pred_inversed[i][j], y_test[i])
    if pred_inversed[i][j] in y_test[i]:
      accuracy = accuracy + 1
      #print("A", accuracy)
      break
print("ACCURACY", accuracy/len(list(pred_inversed)))